class Publication is subclass of Message
types
  -- Publication visibility permissions:
  -- Public - Anyone can see
  -- Friends - Only author's friends can see
  -- FriendsOfFriends - Only author's friends and their friends can see
  -- TransitiveConnection - Anyone with some eventual connection to the author (i.e. friends set transitive closure) can see
  public Permissions = <Public> | <Friends> | <FriendsOfFriends> | <TransitiveConnection>
values
-- TODO Define values here
instance variables
  protected likes: set of User;
  protected permissions: Permissions;
  
operations
  public Publication: User * String * Date * Permissions ==> Publication
      Publication(PublicationAuthor, PublicationContent, PublicationTimestamp, PublicationPermissions) == (
      	author := PublicationAuthor;
      	content := PublicationContent;
      	timestamp := PublicationTimestamp;
      	permissions := PublicationPermissions;
      	likes := {};
      	return self;
      )
      pre PublicationContent <> ""
      post author = PublicationAuthor and content = PublicationContent and timestamp = PublicationTimestamp and likes = {} and permissions = PublicationPermissions;
      
  public updatePermissions: Permissions ==> ()
  		updatePermissions(newPermissions) == (
  			permissions := newPermissions;
  		)
  		post permissions = newPermissions;
  
  pure public getUsersWithPermissions: () ==> set of User
  		getUsersWithPermissions() == (
  			cases permissions:
  			<Public> -> return Facebook`getInstance().getUsers(),
  			<Friends> -> return author.getFriends() union {author},
  			<FriendsOfFriends> -> return author.getFriendsOfFriends() union {author},
  			<TransitiveConnection> -> return author.getFriendsTransitiveClosure() union {author},
  			others -> return Facebook`getInstance().getUsers()
  			end
  		);
  
  public like: User ==> ()
  		like(user) == (
  			likes := likes union {user}
  		)
  		pre user in set getUsersWithPermissions()
  		post user in set likes and card likes = card likes~ + 1;
 	
 	public removeLike: User ==> ()
 			removeLike(user) == (
 				likes := likes \ {user}
 			)
 			pre user in set likes
 			post user not in set likes and card likes = card likes~ - 1;
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Publication