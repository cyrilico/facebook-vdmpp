-- Class representing a user publication to his timeline
class Publication is subclass of Message
types
  -- Publication visibility permissions (note that, in any case, author's blocked users do not have access):
  -- Public - Anyone can see
  -- Friends - Only author's friends can see
  -- FriendsOfFriends - Only author's friends and their friends can see
  -- TransitiveConnection - Anyone with some eventual connection to the author (i.e. friends set transitive closure) can see
  public Permissions = <Public> | <Friends> | <FriendsOfFriends> | <TransitiveConnection>
values
instance variables
	-- Unique ID to identify publication
	protected static idCounter: nat1 := 1;
	protected id: nat1 := idCounter;
	-- Users that have liked publication
  protected likes: set of User;
  protected permissions: Permissions;
  
operations
	-- Constructor
  public Publication: User * String * Date * Permissions ==> Publication
      Publication(PublicationAuthor, PublicationContent, PublicationTimestamp, PublicationPermissions) == (
      	idCounter := idCounter + 1;
      	author := PublicationAuthor;
        content := PublicationContent;
        timestamp := PublicationTimestamp;
      	permissions := PublicationPermissions;
      	likes := {};
      	return self;
      )
      pre PublicationContent <> ""
      post idCounter = idCounter~ + 1 and author = PublicationAuthor and content = PublicationContent and timestamp = PublicationTimestamp and likes = {} and permissions = PublicationPermissions;
  
  -- Unique ID counter reset
  public static resetIDCounter: () ==> ()
  		resetIDCounter() == (
  			idCounter := 1;
  		);
  		
  -- ID getter
  pure public getId: () ==> nat1
  		getId() == return id
  		post RESULT = id;

  -- Permissions getter
  pure public getPermissions: () ==> Permissions
  		getPermissions() == return permissions
  		post RESULT = permissions;
  		
  -- Update publication's access permitions
  -- IN newPermissions - new publication permission settings
  public updatePermissions: Permissions ==> ()
  		updatePermissions(newPermissions) == (
  			permissions := newPermissions;
  		)
  		post permissions = newPermissions;
  
  -- Checks if a user has access to this publication
  -- IN user - user to be checked
  -- OUT true if user has access to publication, false otherwise
  pure public userHasPermissions: User ==> bool
  		userHasPermissions(user) == (
  			cases permissions:
  			<Public> -> return user not in set author.getBlockedUsers(),
  			<Friends> -> return user in set author.getFriends() union {author} \ author.getBlockedUsers(),
  			<FriendsOfFriends> -> return user in set author.getFriendsOfFriends() union {author} \ author.getBlockedUsers(),
  			others -> return user in set author.getFriendsTransitiveClosure() union {author} \ author.getBlockedUsers() -- permissions = <TransitiveConnection>
  			end
  		)
  		pre user in set Facebook`getInstance().getUsers();
  
  -- Getter for users that liked publication
  pure public getLikes: () ==> set of User
  		getLikes() == return likes
  		post RESULT = likes;
  
  -- Register that a user (that has access to the publication - guaranteed by precondition) liked this publication
  -- IN user - user that liked publication
  public like: User ==> ()
  		like(user) == (
  			likes := likes union {user}
  		)
  		pre userHasPermissions(user)
  		post user in set likes and card likes = card likes~ + 1;
 	
 	-- Register that a user that previously liked this publication (guaranteed by precondition) no longer does so
 	public removeLike: User ==> ()
 			removeLike(user) == (
 				likes := likes \ {user}
 			)
 			pre user in set likes
 			post user not in set likes and card likes = card likes~ - 1;
 	
 	-- Calculate a publication's score in regards to a user to assess its relevance for a main feed position
 	-- IN user - user to generate feed for
 	-- OUT publication score
 	public calculateScore: User ==> rat
 			calculateScore(user) == (
 				-- Criteria: Number of likes, boosted by number of likes from friends and possibly fact that author is a friend
 				return (1 + card likes) * (1 + card (likes inter user.friends)) * (if user in set author.friends then 2 else 1); 
 			)
 			pre user <> author
 			post RESULT >= 0;
functions
traces
end Publication