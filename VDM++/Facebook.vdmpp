class Facebook
types
	public String = seq1 of char;
values
-- TODO Define values here
instance variables
  public users: set of User := {};
  private static globalInstance: Facebook := new Facebook();
  
  -- User name uniqueness
  inv not exists user1, user2 in set users & user1 <> user2 and user1.getName() = user2.getName();
  
operations
  private Facebook: () ==> Facebook
    Facebook() == return self
    post users = {};
   
  public pure static getInstance: () ==> Facebook
    getInstance() == return globalInstance;
  
  public static clearInstance: () ==> Facebook
  	clearInstance() == (
  		globalInstance := new Facebook();
  		return getInstance()
  	);
  
  public pure getUsers: () ==> set of User
  		getUsers() == return users
  		post RESULT = users;
  		
  public pure getUserByName: String ==> [User]
  		getUserByName(name) == (
  			dcl result: [User] := nil;
  			
				for all user in set users do
					if user.getName() = name then
						result := user
					else 
						skip;
		
				return result
  		)
  		post (exists user in set users & user.getName() = name) => RESULT <> nil;
  
  public addUser: User ==> ()
    addUser(user) == (
      users := users union {user}
    )
    pre user not in set users
    post users = users~ union {user};
  
  public addUsers: set of User ==> ()
    addUsers(newUsers) == (
      users := users union newUsers
    )
    pre newUsers inter users = {}
    post users = users~ union newUsers;
  
  public addFriendship: User * User ==> ()
    addFriendship(user1, user2) == (
      dcl u1: User := user1;
      dcl u2: User := user2;
      atomic(
        u1.friends := user1.friends union {user2};
        u2.friends := user2.friends union {user1}
      )
    )
    pre user1 in set users and user2 in set users
    post user1 in set user2.friends and user2 in set user1.friends;
  
  public removeFriendship: User * User ==> ()
  	removeFriendship(user1, user2) == (
  		dcl u1: User := user1;
      dcl u2: User := user2;
      atomic(
        u1.friends := user1.friends \ {user2};
        u2.friends := user2.friends \ {user1}
      )
  	)
  	pre user1 in set users and user2 in set users
  	post user1 not in set user2.friends and user2 not in set user1.friends;
  
  public searchUser: String ==> set of User
  		searchUser(searchText) == (
  			return {user | user in set users & user.nameContains(searchText)}
  		)
  		post forall user in set RESULT & exists i,j in set inds user.getName() & user.getName()(i,...,j) = searchText;
  
  public searchPublications: User * String ==> set of Publication
  		searchPublications(searcher, searchText) == (
  			return {publication | 
  				publication in set dunion {elems user.getPublications(searcher) | user in set users} 
  				& publication.contentContains(searchText)} 
  		)
  		pre searcher in set users
  		post forall publication in set RESULT & exists i,j in set inds publication.getContent() & publication.getContent()(i,...,j) = searchText;
	
	public getUserTimeline: User * User ==> seq of Publication
			getUserTimeline(searcher, user) == return user.getPublications(searcher)
			pre {user, searcher} subset users;
	
	--TODO "Magic" feed method that sorts all viewable content by relevance (sort criteria = ?)
	--Don't forget post condition (still TBD)
	public getUserFeed: User ==> seq of Publication
			getUserFeed(user) == (
				-- Retrieve all (visible) publications that either 1) are from a friend or 2) one or more friends have liked
				dcl allPublications: set of Publication := {	publication | 
																												publication in set dunion {elems getUserTimeline(user, member) | member in set users}
																												& publication.getAuthor() in set user.friends or card (publication.getLikes() inter user.friends) > 0
																									 	};
				return [];
			)
			pre user in set users;
			
	public getCommonFriends: User * User ==> set of User
			getCommonFriends(user1, user2) == return user1.friends inter user2.friends
			pre {user1, user2} subset users and user1 <> user2
			post RESULT subset user1.friends and RESULT subset user2.friends;
			--TODO improve post condition
			
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Facebook