class Facebook
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
  public users: set of User := {};
  private static globalInstance: Facebook := new Facebook();
  
  -- User name uniqueness
  inv not exists user1, user2 in set users & user1 <> user2 and user1.getName() = user2.getName();
  
operations
  private Facebook: () ==> Facebook
    Facebook() == return self
    post users = {};
   
  public pure static getInstance: () ==> Facebook
    getInstance() == return globalInstance;
  
  public pure getUsers: () ==> set of User
  		getUsers() == return users
  		post RESULT = users;
  
  public addUser: User ==> ()
    addUser(user) == (
      users := users union {user}
    )
    pre user not in set users
    post users = users~ union {user};
  
  public addUsers: set of User ==> ()
    addUsers(newUsers) == (
      users := users union newUsers
    )
    pre newUsers inter users = {}
    post users = users~ union newUsers;
  
  public addFriendship: User * User ==> ()
    addFriendship(user1, user2) == (
      dcl u1: User := user1;
      dcl u2: User := user2;
      atomic(
        u1.friends := user1.friends union {user2};
        u2.friends := user2.friends union {user1}
      )
    )
    pre user1 in set users and user2 in set users
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Facebook