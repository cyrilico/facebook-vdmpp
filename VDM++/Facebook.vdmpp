class Facebook
types
	public String = seq1 of char;
	-- Class private type to use in publication sorting for main feed generation
	protected PublicationRank :: publication: Publication
															 score: nat;
  	
	protected UserRank :: user: User
															 score: nat;
  	
values
instance variables
  public users: set of User := {};
  -- Singleton
  private static globalInstance: Facebook := new Facebook();
  
  -- User name uniqueness
  inv not exists user1, user2 in set users & user1 <> user2 and user1.getName() = user2.getName();  
operations
	-- Constructor
  private Facebook: () ==> Facebook
    Facebook() == (
    	users := {};
    	return self;
    )
    post users = {};
  
  -- Singleton getter
  public pure static getInstance: () ==> Facebook
    getInstance() == return globalInstance;
  
  -- Resets the singleton
  public static clearInstance: () ==> Facebook
  	clearInstance() == (
  		globalInstance := new Facebook();
  		Publication`resetIDCounter();
  		ChatMessage`resetIDCounter();
  		return getInstance();
  	);
  
  -- Users getter
  public pure getUsers: () ==> set of User
  		getUsers() == return users
  		post RESULT = users;
  
  -- Retrieve a specific user by his (unique) name, if he exists
  -- IN name - user name
  -- OUT user object if there is a user with given name, nil otherwise
  public pure getUserByName: String ==> [User]
  		getUserByName(name) == (
  			dcl result: [User] := nil;
  			
				for all user in set users do
					if user.getName() = name then
						result := user
					else 
						skip;
		
				return result
  		)
  		post (exists user in set users & user.getName() = name) => RESULT <> nil;
  
  -- Add a user to the platform
  -- IN user - user to be added
  public addUser: User ==> ()
    addUser(user) == (
      users := users union {user}
    )
    pre not exists member in set users & member.getName() = user.getName()
    post users = users~ union {user};
  
  -- Add a set of user to the platform simultaneously
  -- IN users - set of users to be added
  public addUsers: set of User ==> ()
    addUsers(newUsers) == (
      users := users union newUsers
    )
    pre newUsers inter users = {}
    post users = users~ union newUsers;
  
  -- Add a friendship between two users
  public addFriendship: User * User ==> ()
    addFriendship(user1, user2) == (
      dcl u1: User := user1;
      dcl u2: User := user2;
      atomic(
        u1.friends := user1.friends union {user2};
        u2.friends := user2.friends union {user1}
      )
    )
    pre user1 in set users and user2 in set users and user1 not in set user2.getBlockedUsers() and user2 not in set user1.getBlockedUsers()
    post user1 in set user2.friends and user2 in set user1.friends;
  
  -- Remove a previously existing friendship between users
  public removeFriendship: User * User ==> ()
  	removeFriendship(user1, user2) == (
  		dcl u1: User := user1;
      dcl u2: User := user2;
      atomic(
        u1.friends := user1.friends \ {user2};
        u2.friends := user2.friends \ {user1}
      )
  	)
  	pre user1 in set users and user2 in set users
  	post user1 not in set user2.friends and user2 not in set user1.friends;
  
  -- Retrieve all publications user can see. For internal usage, since post conditions do not allow set comprehensions for code generation
  -- IN searcher - user to assume perspective from
  -- OUT publications he has access to
  pure protected getAllPublications: User ==> set of Publication
  		getAllPublications(searcher) == return dunion {elems getUserTimeline(searcher,member) | member in set users};
  
  -- User likes a publication
  -- IN user - user that likes publication
  -- IN publicationId - unique publication identifier
  public likePublication: User * nat1 ==> ()
  		likePublication(user, publicationId) == (
  			let publication = iota publication in set getAllPublications(user) & publication.getId() = publicationId in publication.like(user);
  		)
  		pre user in set users and exists1 publication in set getAllPublications(user) & publication.getId() = publicationId;
  		
 	-- User unlikes a publication
  -- IN user - user that currently likes publication
  -- IN publicationId - unique publication identifier
  public unlikePublication: User * nat1 ==> ()
  		unlikePublication(user, publicationId) == (
  			let publication = iota publication in set getAllPublications(user) & publication.getId() = publicationId in publication.removeLike(user);
  		)
  		pre user in set users and exists1 publication in set getAllPublications(user) & publication.getId() = publicationId and user in set publication.getLikes();
  
  -- Look up users whose name matches a search pattern
  -- IN searchText - string to look up
  -- OUT set of users whose name contains search text
  public searchUser: String ==> set of User
  		searchUser(searchText) == (
  			return {user | user in set users & user.nameContains(searchText)}
  		)
  		post forall user in set RESULT & exists i,j in set inds user.getName() & user.getName()(i,...,j) = searchText;
  
  -- Look up publications that user has access to and whose content matches a search pattern
  -- IN user - user that is searching
  -- IN searchText - string to look up
  -- OUT set of publications that user has access to and whose content contains search text
  public searchPublications: User * String ==> set of Publication
  		searchPublications(searcher, searchText) == (
  			return {publication | 
  				publication in set dunion {elems user.getPublications(searcher) | user in set users & user <> searcher} 
  				& publication.contentContains(searchText)} 
  		)
  		pre searcher in set users
  		post forall publication in set RESULT & exists i,j in set inds publication.getContent() & publication.getContent()(i,...,j) = searchText;
	
	-- Get a user's timeline from another user's perspective
	-- IN searcher - user that is looking up timeline
	-- IN user - user whose timeline is being checked
	-- OUT user timeline (i.e. all publications, sorted by timestamp, that searcher user has access to)
	pure public getUserTimeline: User * User ==> seq of Publication
			getUserTimeline(searcher, user) == return user.getPublications(searcher)
			pre {user, searcher} subset users;
	
	-- Generated main feed for a user.
	-- This involves retrieving all publications that are considered to be relevant for the user (and, of course, he has access to)
	-- (i.e. publications from friends or that friends have liked)
	-- Then the publications are sorted according to a score that privileges likes by friends and author friendship
	-- IN user - user to generate feed for
	-- OUT sequence of publications, sorted by score - the feed
	public getUserFeed: User ==> seq of Publication
			getUserFeed(user) == (
				-- Retrieve all (visible) publications that either 1) are from a friend or 2) one or more friends have liked
				dcl allPublications: set of Publication := {publication | 
																												publication in set dunion {elems getUserTimeline(user, member) | member in set users & user <> member}
																												& publication.getAuthor() in set user.friends or card (publication.getLikes() inter user.friends) > 0
																									 	};
				
				-- Calculate each publication's score
				dcl seqOfPubs: seq of PublicationRank := [];
				for all publication in set allPublications do
					seqOfPubs := seqOfPubs ^ [mk_PublicationRank(publication, publication.calculateScore(user))];
				
				-- Sort and present result
				return sortPublications(seqOfPubs);
			)
			pre user in set users
			post forall i in set inds RESULT & RESULT(i).userHasPermissions(user); -- User has access to all publications recommended
	
	-- Retrieves common friends between two users
	public getCommonFriends: User * User ==> set of User
			getCommonFriends(user1, user2) == return user1.friends inter user2.friends
			pre {user1, user2} subset users and user1 <> user2
			post RESULT subset user1.friends and RESULT subset user2.friends;
	
	-- Retrieves friend suggestions for a user
	-- This involves calculating the user's friends of friends, 
	-- and sorting them based on who has the most friends in common
	-- with the target user. Returns the top 5 
	-- IN user - user to generate friend suggestions for
	-- OUT sequence of user, sorted by # of friends in common - the suggestions
	public getFriendSuggestions: User ==> seq of User
			getFriendSuggestions(user) == (
				dcl unsortedSuggestions : set of User := user.getFriendsOfFriends() \ user.friends;
				
				dcl scoredSuggestions : seq of UserRank := [];
				dcl sortedSuggestions : seq of User := [];
				
				for all suggestion in set unsortedSuggestions do
					scoredSuggestions := scoredSuggestions ^ [mk_UserRank(suggestion, card getCommonFriends(user, suggestion))];
				
				sortedSuggestions := sortSuggestions(scoredSuggestions);
				
				return sortedSuggestions(1,...,5)
			)
			pre user in set users
			post elems RESULT inter user.friends = {} and elems RESULT inter user.getBlockedUsers() = {};
			
	-- Sorts publications using bubble sort
	protected sortPublications: seq of PublicationRank ==> seq of Publication
			sortPublications(publications) == (
				dcl sorted_list: seq of PublicationRank := publications;
				for i = len publications to 1 by -1 do 
					for j = 1 to i-1 do 
						if comparePublications(sorted_list(j), sorted_list(j+1)) then 
							(dcl temp: PublicationRank := sorted_list(j); 
							sorted_list(j) := sorted_list(j+1); 
							sorted_list(j+1) := temp
							); 
				return [sorted_list(i).publication | i in set inds sorted_list];
				);  
				
	-- Sorts user suggestions using bubble sort
	protected sortSuggestions: seq of UserRank ==> seq of User
		sortSuggestions(suggestions) == (
			dcl sorted_list: seq of UserRank := suggestions;
			for i = len suggestions to 1 by -1 do 
				for j = 1 to i-1 do 
					if compareUsers(sorted_list(j), sorted_list(j+1)) then 
						(dcl temp: UserRank := sorted_list(j); 
						sorted_list(j) := sorted_list(j+1); 
						sorted_list(j+1) := temp
						); 
			return [sorted_list(i).user | i in set inds sorted_list];
			); 
functions
	-- Compare 2 publications based on their score and timestamp for tie break. Used in sorting publications for main feed
	-- IN p1 first publication
	-- IN p2 second publication
	-- OUT true if first publication is to come first, false otherwise
	protected comparePublications: PublicationRank * PublicationRank +> bool
		comparePublications(p1, p2) == (
			p1.score > p2.score or p1.score = p2.score and p1.publication.getTimestamp() > p2.publication.getTimestamp()
		);

	-- Compare 2 users based on their score and name length for tie break. Used in sorting people for friend suggestions
	-- IN u1 first user
	-- IN u2 second user
	-- OUT true if first user comes first, false otherwise	
	protected compareUsers: UserRank * UserRank +> bool
		compareUsers(u1, u2) == (
			u1.score < u2.score or u1.score = u2.score and u1.user.getNameLength() > u2.user.getNameLength()
		);
traces
end Facebook