class TestFacebook is subclass of MyTest

instance variables	
operations		
		-- Test scenario where users are added into the platform (registration)
		-- Covers the respective scenario described in section 2.1 and requirement R1
		protected testRegistration: () ==> ()
			testRegistration() == (
				facebook := Facebook`clearInstance();
				setupUsers();
				
				-- add 1 user
				facebook.addUser(u1);
				facebook.addUser(u2);
				assertTrue(card facebook.getUsers() = 2);
				
				-- add multiple users
				facebook.addUsers({u3,u4,u5});
				assertTrue(card facebook.getUsers() = 5);
				
				assertTrue({u1,u2,u3,u4,u5} = facebook.getUsers());
				
				-- check existing and non existing users
				assertEqual(facebook.getUserByName("user1"), u1);
				assertEqual(facebook.getUserByName("user6"), nil);
				
				-- failing code (trying to register a new user with a name that's already taken)
				--facebook.addUser(new User("user1"));
			);
		
		-- Test scenario where users are looked up by their names
		-- Covers requirement R2
		protected testUserSearch: () ==> ()
			testUserSearch() == (
				-- create some users with more sophisticated names
				dcl ua: User := new User("joseph");
				dcl ub: User := new User("john");
				dcl uc: User := new User("amanda");
				dcl ud: User := new User("anna");
				dcl ue: User := new User("username6");
				facebook := Facebook`clearInstance();
				setupUsers();
				
				-- add some users to the platform
				facebook.addUsers({u1,u2,u3,ua,ub,uc,ud,ue});
				
				assertTrue(card facebook.searchUser("user") = 4);
				assertEqual(facebook.searchUser("user"), {u1,u2,u3,ue});
				
				assertTrue(card facebook.searchUser("jo") = 2);
				assertEqual(facebook.searchUser("jo"), {ua,ub});
				
				assertTrue(ud in set facebook.searchUser("ann"));
				assertTrue(uc not in set facebook.searchUser("ann"));
			);
		
		-- Test scenario where a user checks his main feed to assess the most relevant content for him
		-- Covers the respective scenario described in section 2.1 and requirement R12
		protected testFeed: () ==> ()
			testFeed() == (
				facebook := Facebook`clearInstance();
				setupUsers();
				
				
				facebook.addUsers({u1,u2,u3,u4,u5,u6,u7});
				
				-- set up some friendships
				facebook.addFriendship(u1,u2);
				facebook.addFriendship(u1,u3);
				facebook.addFriendship(u2,u4);
				facebook.addFriendship(u4,u5);
				
				-- create publications
				u1.makePublication("greetings, eager young minds", Date`makeDate(2016,2,29), <TransitiveConnection>); --ID 1 | Will show up to u2,u3 (friends), u4 (friend liked)
				u1.makePublication("greetings, friends", Date`makeDate(2016,12,13), <Friends>); --ID 2 | Will show up to u2,u3 (friends); u2 liked but will not show up to u4 because it is friends only
				u2.makePublication("fear me, friends, for i am back", Date`makeDate(2016,2,29), <Public>); --ID 3 | Will show up to u1, u4 (friends), u3 (friend liked)
				u2.makePublication("back, looking for new friendships", Date`makeDate(2017,01,01), <FriendsOfFriends>); --ID 4 | Will show up to u4 (friend), u5 (friend liked)
				u3.makePublication("what do i need friends for? popularity, of course", Date`makeDate(2018,01,13), <Friends>); --ID 5 | Will show up to u1 (friend)
				u3.makePublication("what's up my dudes it's 2019", Date`makeDate(2019,1,1), <Public>); -- ID 6 | Will show up to u1 (friend), u4 (friend liked) 
				
				-- add some likes
				facebook.likePublication(u2, 1);
				facebook.likePublication(u3, 1);
				facebook.likePublication(u2, 2);
				facebook.likePublication(u1, 3);
				facebook.likePublication(u4, 4);
				facebook.likePublication(u5, 6);
				
				-- Recall score formula: (1+#likes)*(1+#likesFromFriends)*(if authorIsFriend 2 else 1)
				
				-- Feed from u3's perspective
				-- Publication 1's score: (1+2)*(1+1)*(2) = 12
				-- Publication 2's score: (1+1)*(1+0)*(2) = 4
				-- Publication 3's score: (1+1)*(1+1)*(1) = 4
				-- Order then is 1, 2, 3 (2 has a more recent timestamp than 3)
				assertEqual(facebook.getUserFeed(u3), [u1.getPublicationById(1), u1.getPublicationById(2), u2.getPublicationById(3)]);
				
				-- Feed from u4's perspective
				-- Publication 1's score: (1+2)*(1+1)*(1) = 6
				-- Publication 3's score: (1+1)*(1+0)*(2) = 4
				-- Publication 4's score: (1+1)*(1+0)*(2) = 4
				-- Publication 6's score: (1+1)*(1+1)*(0) = 4
				-- Order is then 1, 6, 4, 3 (regarding timestamps, 6 > 4 > 3)
				assertEqual(facebook.getUserFeed(u4), [u1.getPublicationById(1), u3.getPublicationById(6), u2.getPublicationById(4), u2.getPublicationById(3)]);
			);
		
		-- Test scenario where users receive potential friend suggestions
		-- Covers requirement R10
		protected testFriendSuggestions: () ==> ()
			testFriendSuggestions() == (
				dcl userSeq: seq of User;
				dcl userWithLongerName: User := new User("looooongname");
				facebook := Facebook`clearInstance();
				setupUsers();
				
				facebook.addUsers({u1, u2, u3, u4, u5, u6, u7, u8, u9, userWithLongerName});
				
				-- Testing general case
				-- u1 has 3 friends: u2, u3, and u4
				facebook.addFriendship(u1, u2);
				facebook.addFriendship(u1, u3);
				facebook.addFriendship(u1, u4);
				
				-- u5 has 2 friends: u3, and u4
				facebook.addFriendship(u5, u3);
				facebook.addFriendship(u5, u4);
				
				facebook.addFriendship(userWithLongerName, u3);
				facebook.addFriendship(u7, u2);
				facebook.addFriendship(u7, u8);
				
				userSeq := facebook.getFriendSuggestions(u1);
				assertEqual(3, len userSeq);
				assertEqual([u5,userWithLongerName,u7], userSeq); --u5 has 2 common friends (u3, u4), others have 1
				
				userSeq := facebook.getFriendSuggestions(u5);
				assertEqual(2, len userSeq);
				assertEqual([u1, userWithLongerName], userSeq); --u1 has 2 common friends (u3, u4), userWithLongerName has 1
				
				-- Testing case where target user has no friends
				userSeq := facebook.getFriendSuggestions(u9);
				assertEqual(0, len userSeq);
		);
		
			
	public Run: () ==> ()
			Run() == (
				IO`println("Running Facebook Tests\n");
				testRegistration();
				testUserSearch();
				testFeed();
				testFriendSuggestions();
				IO`println("Facebook Tests ran successfully\n");
			);

end TestFacebook