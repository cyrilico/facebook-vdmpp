class User
types
  public String = seq1 of char;
values
-- TODO Define values here
instance variables
  protected user: User; --Keep a self reference for invariant usage (self is not recognised in that scope)
  protected name: String;
  public friends: set of User;
  protected posts: seq of Publication;
  protected chats: map String to GroupChat;
  
  -- No self friendship
  inv user not in set friends;
  
  -- Friendship is bidirectional
  inv forall friend in set friends & user in set friend.friends;
  
  -- All of user's posts must be of his authorship
  -- Same as forall ... getAuthor=user
  inv not exists publication in seq posts & publication.getAuthor() <> user; 
operations
  public User: String ==> User
      User(userName) == (
        name := userName;
        friends := {};
        posts := [];
        chats := {|->};
        user := self;
        return self;
      )
      pre userName <> ""
      post name = userName and friends = {} and posts = [];
  
  pure public getName: () ==> String
      getName() == return name
      post RESULT = name;
  
  pure public getFriends: () ==> set of User
      getFriends() == return friends
      post RESULT = friends;
  
  pure public getFriendsOfFriends: () ==> set of User
  		getFriendsOfFriends() == (
  			-- Union of friends set with every other friends set from user's friends. Then, exclude itself
  			return {people | people in set friends union dunion {friend.friends | friend in set friends} \ {user} } 
  		)
  		post friends subset RESULT and card RESULT >= card friends;
  
  pure public getFriendsTransitiveClosure: () ==> set of User
			getFriendsTransitiveClosure() ==  (
				dcl closure : set of User := friends;
				dcl visited : set of User := {}; 
				while visited <> closure do 
					let t in set (closure \ visited) in (
					closure := closure union t.friends;
					visited := visited union {t}
					);
				return closure \ {user}
			);
			
	pure public nameContains: String ==> bool
			nameContains(string) == (
				dcl userName: String := name;
				
				while len userName >= len string do (
					if userName(1,...,len string) = string
					then return true
					else userName := tl userName
				);
				
				return false
			);
	
	public makePublication: Publication ==> ()
			makePublication(publication) == (
				posts := posts ^ [publication]
			)
			pre publication.getTimestamp() > posts(len posts).getTimestamp()
			post posts = posts~ ^ [publication];
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end User